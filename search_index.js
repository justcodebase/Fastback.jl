var documenterSearchIndex = {"docs":
[{"location":"examples/gen/1_random_trading/","page":"1. Random trading","title":"1. Random trading","text":"EditURL = \"../1_random_trading.jl\"","category":"page"},{"location":"examples/gen/1_random_trading/#Random-trading-strategy-example","page":"1. Random trading","title":"Random trading strategy example","text":"","category":"section"},{"location":"examples/gen/1_random_trading/","page":"1. Random trading","title":"1. Random trading","text":"This dummy example demonstrates how to backtest a simple random trading strategy using synthetic data generated in the script. The price series is a random walk with a drift of 0.1 and initial price 1000.","category":"page"},{"location":"examples/gen/1_random_trading/","page":"1. Random trading","title":"1. Random trading","text":"The strategy randomly buys or sells an instrument with a probability of 1%. Buy and sell orders use the same price series, implying a spread of 0. Each trade is executed at a commission of 0.1%. For the sake of illustration, only 75% of the order quantity is filled.","category":"page"},{"location":"examples/gen/1_random_trading/","page":"1. Random trading","title":"1. Random trading","text":"The account equity and drawdowns are collected for every hour and plotted at the end using the Plots package.","category":"page"},{"location":"examples/gen/1_random_trading/","page":"1. Random trading","title":"1. Random trading","text":"using Fastback\nusing Dates\nusing Random\n\n# set RNG seed for reproducibility\nRandom.seed!(42);\n\n# generate synthetic price series\nN = 2_000;\nprices = 1000.0 .+ cumsum(randn(N) .+ 0.1);\ndts = map(x -> DateTime(2020, 1, 1) + Hour(x), 0:N-1);\n\n# create trading account with $10'000 start capital\nacc = Account();\nadd_cash!(acc, Cash(:USD), 10_000.0);\n\n# register a dummy instrument\nDUMMY = register_instrument!(acc, Instrument(Symbol(\"DUMMY/USD\"), :DUMMY, :USD))\n\n# data collector for account equity and drawdowns (sampling every hour)\ncollect_equity, equity_data = periodic_collector(Float64, Hour(1));\ncollect_drawdown, drawdown_data = drawdown_collector(DrawdownMode.Percentage, Hour(1));\n\n# loop over price series\nfor (dt, price) in zip(dts, prices)\n    # randomly trade with 1% probability\n    if rand() < 0.01\n        quantity = rand() > 0.4 ? 1.0 : -1.0\n        order = Order(oid!(acc), DUMMY, dt, price, quantity)\n        fill_order!(acc, order, dt, price; fill_qty=0.75order.quantity, commission_pct=0.001)\n    end\n\n    # update position and account P&L\n    update_pnl!(acc, DUMMY, price)\n\n    # collect data for plotting\n    if should_collect(equity_data, dt)\n        equity_value = equity(acc, :USD)\n        collect_equity(dt, equity_value)\n        collect_drawdown(dt, equity_value)\n    end\nend\n\n# print account summary\nshow(acc)","category":"page"},{"location":"examples/gen/1_random_trading/#Plot-account-equity-curve","page":"1. Random trading","title":"Plot account equity curve","text":"","category":"section"},{"location":"examples/gen/1_random_trading/","page":"1. Random trading","title":"1. Random trading","text":"using Plots, Printf\ntheme(:juno; titlelocation=:left, titlefontsize=10, widen=false, fg_legend=:false)\n\n# plot equity curve\np = plot(dates(equity_data), values(equity_data);\n    title=\"Account\",\n    label=\"Equity\",\n    linetype=:steppost,\n    yformatter=:plain,\n    size=(800, 400),\n    color=\"#BBBB00\");\np","category":"page"},{"location":"examples/gen/1_random_trading/#Plot-account-equity-drawdown-curve","page":"1. Random trading","title":"Plot account equity drawdown curve","text":"","category":"section"},{"location":"examples/gen/1_random_trading/","page":"1. Random trading","title":"1. Random trading","text":"# plot drawdown curve\np = plot(dates(drawdown_data), 100values(drawdown_data);\n    title=\"Equity drawdowns [%]\",\n    legend=false,\n    linetype=:steppost,\n    color=\"#BB0000\",\n    yformatter=y -> @sprintf(\"%.1f%%\", y),\n    size=(800, 200),\n    fill=(0, \"#BB000033\"));\np","category":"page"},{"location":"examples/gen/3_multi_currency/","page":"3. Multi-Currency trading","title":"3. Multi-Currency trading","text":"EditURL = \"../3_multi_currency.jl\"","category":"page"},{"location":"examples/gen/3_multi_currency/#Multi-currency-trading-example","page":"3. Multi-Currency trading","title":"Multi-currency trading example","text":"","category":"section"},{"location":"examples/gen/3_multi_currency/","page":"3. Multi-Currency trading","title":"3. Multi-Currency trading","text":"This example demonstrates how to trade assets quoted in different currencies. The account has balances in USD, EUR and GBP, and trades stocks denoted in those currencies. The total equity is calculated in USD. A spot exchange rate helper is used to convert between different currencies.","category":"page"},{"location":"examples/gen/3_multi_currency/","page":"3. Multi-Currency trading","title":"3. Multi-Currency trading","text":"using Fastback\nusing Dates\nusing Random\nusing DataFrames\n\n# set RNG seed for reproducibility\nRandom.seed!(42);\n\n# generate synthetic price series for Tesla (USD), Porsche (EUR) and Tesco (GBP)\nN = 2_000;\ndf = DataFrame([\n    :date => map(x -> DateTime(2020, 1, 1) + Hour(x), 0:N-1),\n    :TSLA => 170 .+ cumsum(randn(N) .+ 0.12),\n    :POAHY => 4.5 .+ cumsum(randn(N) .+ 0.02),\n    :TSCO_L => 307 .+ cumsum(randn(N) .+ 0.08)\n]);\n\n# create cash objects for USD, EUR and GBP\nUSD = Cash(:USD; digits=2);\nEUR = Cash(:EUR; digits=2);\nGBP = Cash(:GBP; digits=2);\n\n# create trading account with 10'000 USD, 5'000 EUR and 20'000 GBP cash\nacc = Account();\nadd_cash!(acc, USD, 10_000);\nadd_cash!(acc, EUR, 5_000);\nadd_cash!(acc, GBP, 20_000);\n\n# exchange rates for spot rates\ner = SpotExchangeRates();\n\n# set spot exchange rates once\nadd_asset!(er, USD);\nadd_asset!(er, EUR);\nadd_asset!(er, GBP);\nupdate_rate!(er, EUR, USD, 1.07);\nupdate_rate!(er, GBP, USD, 1.27);\n\nshow(er)\n\n# register stock instruments\ninstruments = [\n    register_instrument!(acc, Instrument(:TSLA, :TSLA, :USD)), # Tesla (USD denominated)\n    register_instrument!(acc, Instrument(:POAHY, :POAHY, :EUR)), # Porsche (EUR denominated)\n    register_instrument!(acc, Instrument(:TSCO_L, :TSCO_L, :GBP)), # Tesco (GBP denominated)\n];\n\n# data collector for account equity and drawdowns (sampling every hour)\ncollect_equity, equity_data = periodic_collector(Float64, Hour(1));\ncollect_drawdown, drawdown_data = drawdown_collector(DrawdownMode.Percentage, Hour(1));\n\n# loop over price series\nfor i in 1:N\n    dt = df.date[i]\n\n    # randomly trade with 1% probability\n    if rand() < 0.01\n        inst = rand(instruments)\n        price = df[i, inst.symbol]\n        quantity = rand() > 0.5 ? 10.0 : -10.0\n        order = Order(oid!(acc), inst, dt, price, quantity)\n        fill_order!(acc, order, dt, price; commission_pct=0.001)\n    end\n\n    # update position and account P&L\n    for inst in instruments\n        price = df[i, inst.symbol]\n        update_pnl!(acc, inst, price)\n    end\n\n    # collect data for plotting\n    if should_collect(equity_data, dt)\n        total_equity = (\n            equity(acc, :USD) +\n            equity(acc, :EUR) * get_rate(er, EUR, USD) +\n            equity(acc, :GBP) * get_rate(er, GBP, USD)\n        )\n        collect_equity(dt, total_equity)\n        collect_drawdown(dt, total_equity)\n    end\nend\n\n# print account summary\nshow(acc)","category":"page"},{"location":"examples/gen/3_multi_currency/#Plot-account-equity-curve","page":"3. Multi-Currency trading","title":"Plot account equity curve","text":"","category":"section"},{"location":"examples/gen/3_multi_currency/","page":"3. Multi-Currency trading","title":"3. Multi-Currency trading","text":"using Plots, Printf\ntheme(:juno; titlelocation=:left, titlefontsize=10, widen=false, fg_legend=:false)\n\n# plot equity curve\np = plot(dates(equity_data), values(equity_data);\n    title=\"Account\",\n    label=\"Equity\",\n    linetype=:steppost,\n    yformatter=:plain,\n    size=(800, 400),\n    color=\"#BBBB00\");\np","category":"page"},{"location":"examples/gen/3_multi_currency/#Plot-account-equity-drawdown-curve","page":"3. Multi-Currency trading","title":"Plot account equity drawdown curve","text":"","category":"section"},{"location":"examples/gen/3_multi_currency/","page":"3. Multi-Currency trading","title":"3. Multi-Currency trading","text":"# plot drawdown curve\np = plot(dates(drawdown_data), 100values(drawdown_data);\n    title=\"Equity drawdowns [%]\",\n    legend=false,\n    linetype=:steppost,\n    color=\"#BB0000\",\n    yformatter=y -> @sprintf(\"%.1f%%\", y),\n    size=(800, 200),\n    fill=(0, \"#BB000033\"));\np","category":"page"},{"location":"basic_setup/#Fastback-basic-backtest-setup","page":"Basic setup","title":"Fastback basic backtest setup","text":"","category":"section"},{"location":"basic_setup/","page":"Basic setup","title":"Basic setup","text":"A backtest using Fastback usually consists of the following parts:","category":"page"},{"location":"basic_setup/#1.-Data","page":"Basic setup","title":"1. Data","text":"","category":"section"},{"location":"basic_setup/","page":"Basic setup","title":"Basic setup","text":"Acquire data like price, volume and other featuers you want to backtest on. This can be from a DataFrame, a CSV file, or a database. Ideally, it can be looped over, or streamed efficiently.","category":"page"},{"location":"basic_setup/#2.-Account","page":"Basic setup","title":"2. Account","text":"","category":"section"},{"location":"basic_setup/","page":"Basic setup","title":"Basic setup","text":"Initialize the account you want to backtest with. The account holds the assets (funds), positions, trades, and does all the bookkeeping. Specify the initial funds for the account used by adding cash amounts.","category":"page"},{"location":"basic_setup/#3.-Instruments","page":"Basic setup","title":"3. Instruments","text":"","category":"section"},{"location":"basic_setup/","page":"Basic setup","title":"Basic setup","text":"Register the instruments you want to trade with, e.g. stocks or cryptocurrencies. Instruments specify the display symbol, base- and quote symbols, tick sizes and valid value ranges.","category":"page"},{"location":"basic_setup/#4.-Data-collectors","page":"Basic setup","title":"4. Data collectors","text":"","category":"section"},{"location":"basic_setup/","page":"Basic setup","title":"Basic setup","text":"Initialize data collectors for account balance, equity, drawdowns, etc. Data collectors are not required, but help in collecting data for further analysis of the backtest results.","category":"page"},{"location":"basic_setup/#5.-Trading-logic","page":"Basic setup","title":"5. Trading logic","text":"","category":"section"},{"location":"basic_setup/","page":"Basic setup","title":"Basic setup","text":"Implement the actual trading logic you want to backtest, i.e. the strategy. It is called at every iteration of the input data and takes trading decisions like buying or selling instruments. In a live-setting, the data would be streamed to the trading logic instead of being looped over.","category":"page"},{"location":"basic_setup/#6.-Analysis","page":"Basic setup","title":"6. Analysis","text":"","category":"section"},{"location":"basic_setup/","page":"Basic setup","title":"Basic setup","text":"Analyze the backtest results by inspecing the account and the collected data. Print account balances, equity, drawdowns, etc., or create plots. Alternatively, store the results in a Vector or DataFrame for further analysis.For example, when running an optimization, we compute the metric of interest and store it in a Vector or similar. At the end of the optimization, we can then inspect the results and find the best parameters.","category":"page"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"EditURL = \"../2_portfolio_trading.jl\"","category":"page"},{"location":"examples/gen/2_portfolio_trading/#Portfolio-trading-strategy-example","page":"2. Portfolio trading","title":"Portfolio trading strategy example","text":"","category":"section"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"This example demonstrates how to run a backtest with multiple assets, i.e. trading a portfolio of assets.","category":"page"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"The price data is loaded from a CSV file containing daily close prices for the stocks AAPL, NVDA, TSLA, and GE, ranging from 2022-01-03 to 2024-04-22.","category":"page"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"The strategy buys one stock if the last 5 days were positive, and sells it again if the last 2 days were negative. Each trade is executed at a commission of 0.1%.","category":"page"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"When missing data points are detected for a stock, all open positions for that stock are closed. Logic of this type is common in real-world strategies and harder to implement in a vectorized way, showcasing the flexibility of Fastback.","category":"page"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"The account equity, balance and drawdowns are collected for every day and plotted at the end using the Plots package. Additionally, the performance and P&L breakdown of each stock is plotted and statistics (avg. P&L, worst P&L, best P&L, win rate) are printed.","category":"page"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"using Fastback\nusing Dates\nusing CSV\nusing DataFrames\n\ndata_path = \"../data/stocks_1d.csv\";\n\n# if data path doesn't exist, try to change working directory\nisfile(data_path) || cd(\"docs/src/examples\")\n\n# load CSV daily stock data for symbols AAPL, NVDA, TSLA, GE\ndf_csv = DataFrame(CSV.File(data_path; dateformat=\"yyyy-mm-dd HH:MM:SS\"));\ndf_csv.symbol = Symbol.(df_csv.symbol); # convert string to symbol type\ndf = unstack(df_csv, :dt_close, :symbol, :close) # pivot long to wide format\nsymbols = Symbol.(names(df)[2:end]);\n\n# print summary\ndescribe(df)\n\n# create trading account with $10'000 start capital\nacc = Account();\nadd_cash!(acc, Cash(:USD), 10_000.0);\n\n# register instruments for all symbols\ninstruments = map(sym -> Instrument(sym, sym, :USD), symbols);\nregister_instrument!.(Ref(acc), instruments);\n\n# data collector for account balance, equity and drawdowns (sampling every day)\ncollect_balance, balance_data = periodic_collector(Float64, Day(1));\ncollect_equity, equity_data = periodic_collector(Float64, Day(1));\ncollect_drawdown, drawdown_data = drawdown_collector(DrawdownMode.Percentage, Day(1));\n\nfunction open_position!(acc, inst, dt, price)\n    # invest 20% of equity in the position\n    qty = 0.2equity(acc, :USD) / price\n    order = Order(oid!(acc), inst, dt, price, qty)\n    fill_order!(acc, order, dt, price; commission_pct=0.001)\nend\n\nfunction close_position!(acc, inst, dt, price)\n    # close position for instrument, if any\n    pos = get_position(acc, inst)\n    has_exposure(pos) || return\n    order = Order(oid!(acc), inst, dt, price, -pos.quantity)\n    fill_order!(acc, order, dt, price; commission_pct=0.001)\nend\n\n# loop over each row of DataFrame\nfor i in 6:nrow(df)\n    row = df[i, :]\n    dt = row.dt_close\n\n    # loop over all instruments and check strategy rules\n    for inst in instruments\n        price = row[inst.symbol]\n\n        window_open = @view df[i-5:i, inst.symbol]\n        window_close = @view df[i-2:i, inst.symbol]\n\n        # close position of instrument if missing data\n        if any(ismissing.(window_open))\n            close_price = get_position(acc, inst).avg_price\n            close_position!(acc, inst, dt, close_price)\n            continue\n        end\n\n        if !is_exposed_to(acc, inst)\n            # buy if last 5 days were positive\n            all(diff(window_open) .> 0) && open_position!(acc, inst, dt, price)\n        else\n            # close position if last 2 days were negative\n            all(diff(window_close) .< 0) && close_position!(acc, inst, dt, price)\n        end\n\n        # update position and account P&L\n        update_pnl!(acc, inst, price)\n    end\n\n    # close all positions at the end of backtest\n    if i == nrow(df)\n        for inst in instruments\n            price = row[inst.symbol]\n            close_position!(acc, inst, dt, price)\n        end\n    end\n\n    # collect data for plotting\n    if should_collect(equity_data, dt)\n        equity_value = equity(acc, :USD)\n        collect_balance(dt, cash(acc, :USD))\n        collect_equity(dt, equity_value)\n        collect_drawdown(dt, equity_value)\n    end\nend\n\n# print account summary\nshow(acc)","category":"page"},{"location":"examples/gen/2_portfolio_trading/#Plot-account-balance,-equity,-drawdowns-and-stocks-performance","page":"2. Portfolio trading","title":"Plot account balance, equity, drawdowns and stocks performance","text":"","category":"section"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"using Plots, Query, Printf, Measures\n\ntheme(:juno; titlelocation=:left, titlefontsize=10, widen=false, fg_legend=:false)\n\n# equity / cash balance\np1 = plot(\n    dates(balance_data), values(balance_data);\n    title=\"Account\",\n    label=\"Cash balance\",\n    linetype=:steppost,\n    yformatter=:plain,\n    color=\"#0088DD\");\nplot!(p1,\n    dates(equity_data), values(equity_data);\n    label=\"Equity\",\n    linetype=:steppost,\n    color=\"#BBBB00\");\n\n# drawdowns\np2 = plot(\n    dates(drawdown_data), 100values(drawdown_data);\n    title=\"Equity drawdowns [%]\",\n    legend=false,\n    color=\"#BB0000\",\n    yformatter=y -> @sprintf(\"%.1f%%\", y),\n    linetype=:steppost,\n    fill=(0, \"#BB000033\"));\n\n# stocks performance\np3 = plot(\n    df.dt_close, df[!, 2] ./ df[1, 2];\n    title=\"Stocks performance (normalized)\",\n    yformatter=y -> @sprintf(\"%.1f\", y),\n    label=names(df)[2],\n    linetype=:steppost,\n    color=:green);\nfor i in 3:ncol(df)\n    plot!(p3,\n        df.dt_close, df[!, i] ./ df[1, i];\n        label=names(df)[i])\nend\n\n# P&L breakdown by stocks\npnl_by_inst = acc.trades |>\n              @groupby(_.order.inst.symbol) |>\n              @map({\n                  symbol = key(_),\n                  pnl = sum(getfield.(_, :realized_pnl))\n              }) |> DataFrame\np4 = bar(string.(pnl_by_inst.symbol), pnl_by_inst.pnl;\n    legend=false,\n    title=\"P&L breakdown by stocks [USD]\",\n    permute=(:x, :y),\n    xlims=(0, size(pnl_by_inst)[1]),\n    yformatter=y -> @sprintf(\"%.0f\", y),\n    color=\"#BBBB00\",\n    linecolor=nothing,\n    bar_width=0.5)\n\np = plot(p1, p2, p3, p4;\n    layout=@layout[a{0.4h}; b{0.15h}; c{0.3h}; d{0.15h}],\n    size=(800, 800), margin=0mm, left_margin=5mm);\np","category":"page"},{"location":"examples/gen/2_portfolio_trading/#Calculate-statistics-per-stock","page":"2. Portfolio trading","title":"Calculate statistics per stock","text":"","category":"section"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"Calculates summary statistics for each stock. Using the Query.jl package, all trades are first grouped by instrument symbol, then average P&L, worst P&L, best P&L, and win rate are calculated. Finally, the results are piped into a DataFrame and printed using the PrettyTables.jl package.","category":"page"},{"location":"examples/gen/2_portfolio_trading/","page":"2. Portfolio trading","title":"2. Portfolio trading","text":"using PrettyTables\n\ndf = acc.trades |>\n@groupby(_.order.inst.symbol) |>\n@map({\n    symbol = key(_),\n    avg_pnl = sum(getfield.(_, :realized_pnl)) / length(_),\n    worst_pnl = minimum(getfield.(_, :realized_pnl)),\n    best_pnl = maximum(getfield.(_, :realized_pnl)),\n    win_rate = round.(count(getfield.(_, :realized_pnl) .> 0) / count(is_realizing.(_)), sigdigits=2),\n}) |> DataFrame\n\npretty_table(df; header=[\"Symbol\", \"Avg P&L\", \"Worst P&L\", \"Best P&L\", \"Win Rate\"])","category":"page"},{"location":"#Fastback.jl-Blazingly-fast-Julia-backtester","page":"Home","title":"Fastback.jl - Blazingly fast Julia backtester 🚀","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fastback provides a lightweight, flexible and highly efficient event-based backtesting library for quantitative trading strategies.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main value of Fastback is provided by the account and bookkeeping implementation. It keeps track of the open positions, account balance and equity. Furthermore, the execution logic supports commissions, slippage, partial fills and execution delays in its design.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fastback does not try to model every aspect of a trading system, e.g. brokers, data sources, logging etc. Instead, it provides basic building blocks for creating a custom backtesting environment that is easy to understand and extend. For example, Fastback has no notion of \"strategy\" or \"indicator\", such constructs are highly strategy specific, and therefore up to the user to define.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The event-based architecture aims to mimic the way a real-world trading systems works, where new data is ingested as a continuous data stream, i.e. events. This reduces the implementation gap from backtesting to real-world execution significantly compared to a vectorized backtesting frameworks.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Event-based, modular architecture\nMulti-currency support\nHold multiple cash assets in parallel, e.g. USD, EUR, BTC etc.\nTrade instruments with different quote currencies corresponding to the account currencies\nHelpers for currency conversion\nSupports arbitrary price data sources\nSupports modelling commissions, execution delays, price slippage and partial fills\nFlexible data collectors to historize account balances, drawdowns, etc.\nFacilities for parallelized backtesting and hyperparameter optimization\nUses position netting approach for bookkeeping\nMaintains single position per instrument using weighted average cost method\nAbility to attach arbirary metadata to instruments and orders in type-safe manner","category":"page"},{"location":"#Bug-reports-and-feature-requests","page":"Home","title":"Bug reports and feature requests","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please report any issues via the GitHub issue tracker.","category":"page"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"EditURL = \"../4_metadata.jl\"","category":"page"},{"location":"examples/gen/4_metadata/#Attach-metadata-to-instruments-and-orders","page":"4. Attach metadata","title":"Attach metadata to instruments and orders","text":"","category":"section"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"This example, based on Random trading strategy example, demonstrates how to add metadata to instruments and orders. This is useful for attaching additional information to instruments and orders, such as instrument names, descriptions, or custom attributes, e.g. for storing the signal, strategy, or model that generated the order.","category":"page"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"The type of the metadata can be arbitrarily defined by the user, and is typesafe for best performance.","category":"page"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"The Account type has the following three type parameters:","category":"page"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"OData: Order metadata type\nIData: Instrument metadata type\nCData: Cash metadata type","category":"page"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"by default, these are set to Nothing, but can be customized to any type.","category":"page"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"In this example, we define custom types OData for order metadata, and IData for instrument metadata. The order metadata type OData has a single field probability::Float64, and the instrument metadata type IData has a single field full_name::String.","category":"page"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"using Fastback\nusing Dates\nusing Random\nusing Printf\n\n# set RNG seed for reproducibility\nRandom.seed!(42);\n\n# metadata type for orders\nstruct OData\n    probability::Float64\nend\n\nfunction Base.show(io::IO, o::OData)\n    print(io, @sprintf(\"probability=%.2f\", o.probability))\nend\n\n# metadata type for instruments\nstruct IData\n    full_name::String\nend\n\nfunction Base.show(io::IO, o::IData)\n    print(io, \"full_name=$(o.full_name)\")\nend\n\n# generate synthetic price series\nN = 2_000;\nprices = 1000.0 .+ cumsum(randn(N) .+ 0.1);\ndts = map(x -> DateTime(2020, 1, 1) + Hour(x), 0:N-1);\n\n# create trading account with $10'000 start capital\nacc = Account(; odata=OData, idata=IData);\nadd_cash!(acc, Cash(:USD), 10_000.0);\n\n# register a dummy instrument\nDUMMY = register_instrument!(acc, Instrument(Symbol(\"DUMMY/USD\"), :DUMMY, :USD;\n    metadata=IData(\"Dummy instrument name\")));\n\n# data collector for account equity and drawdowns (sampling every hour)\ncollect_equity, equity_data = periodic_collector(Float64, Hour(1));\ncollect_drawdown, drawdown_data = drawdown_collector(DrawdownMode.Percentage, Hour(1));\n\n# loop over price series\nfor (dt, price) in zip(dts, prices)\n    # randomly trade with 1% probability\n    if rand() < 0.01\n        prob = rand()\n        quantity = prob > 0.4 ? 1.0 : -1.0\n        order = Order(oid!(acc), DUMMY, dt, price, quantity; metadata=OData(prob))\n        fill_order!(acc, order, dt, price; fill_qty=0.75order.quantity, commission_pct=0.001)\n    end\n\n    # update position and account P&L\n    update_pnl!(acc, DUMMY, price)\n\n    # collect data for plotting\n    if should_collect(equity_data, dt)\n        equity_value = equity(acc, :USD)\n        collect_equity(dt, equity_value)\n        collect_drawdown(dt, equity_value)\n    end\nend","category":"page"},{"location":"examples/gen/4_metadata/#Print-instrument-incl.-metadata-to-console","page":"4. Attach metadata","title":"Print instrument incl. metadata to console","text":"","category":"section"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"Note that at the end, metadata is printed based on the show method defined above for IData type.","category":"page"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"show(DUMMY)","category":"page"},{"location":"examples/gen/4_metadata/#Print-account-summary-incl.-metadata-to-console","page":"4. Attach metadata","title":"Print account summary incl. metadata to console","text":"","category":"section"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"Note that at the end of the Trades table, a Metadata column is shown based on the show method defined above for OData type.","category":"page"},{"location":"examples/gen/4_metadata/","page":"4. Attach metadata","title":"4. Attach metadata","text":"show(acc)","category":"page"}]
}
